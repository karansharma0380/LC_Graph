Mutilsolver - Smallest, Longest, Ceil, Floor, Kth Largest Path.



Solution:  Before solving this an important concept is needed to be done.

 i. Interface is like a Contract of a function, means it have to override the functions of the interface.
 ii. When a class implements an interface it provides body of all the functions of interface.
 iii.Comparable interface is used to define the natural ordering of objects of a class. This is particularly useful when working 
  with data structures like heaps, which rely on comparing elements to maintain their order. The compareTo method is a part of 
 the Comparable interface, and it is implemented by a class to specify how instances of that class should be compared to each other.
  
  
   Comparable ---->   this interface has only compareTo function
                          int compareTo(Pair o){
                                  return this.something - o.something;           if t>0 it return +ve value
                          }                                                      if t==0  it return 0 
                                                                                 if t<0 it return -ve value
Let's look at an example to illustrate the usage of Comparable in the context of a heap. Suppose you have a class called
Person that you want to store in a min-heap based on their age. Here's how you could implement the Comparable interface and 
use it in a heap:


import java.util.PriorityQueue;

class Person implements Comparable<Person> {
    private String name;
    private int age;

    public Person(String name, int age) {
        this.name = name;
        this.age = age;
    }

    public int getAge() {
        return age;
    }

    @Override
    public int compareTo(Person otherPerson) {
        // Compare persons based on their age
        return this.age - otherPerson.age;
    }

    @Override
    public String toString() {
        return name + " (Age: " + age + ")";
    }
}

public class HeapExample {
    public static void main(String[] args) {
        // Create a min-heap of persons
        PriorityQueue<Person> minHeap = new PriorityQueue<>();

        // Add persons to the heap
        minHeap.add(new Person("Alice", 25));
        minHeap.add(new Person("Bob", 30));
        minHeap.add(new Person("Charlie", 22));

        // Print persons in ascending order of age (min-heap)
        while (!minHeap.isEmpty()) {
            System.out.println(minHeap.poll());
        }
    }
}


The expressions this.age - o.age and o.age - this.age in the context of a compareTo method will yield different results based on
 the order in which the subtraction is performed.

  1. this.age - o.age:
        If the result is a negative value, it indicates that the age of the current object (this) is less than the age of the other
               object (o).
        If the result is zero, it indicates that the ages are equal.
        If the result is a positive value, it indicates that the age of the current object (this) is greater than the age of the
               other object (o).

   2. o.age - this.age:
        If the result is a negative value, it indicates that the age of the other object (o) is less than the age of the current
                object (this).
        If the result is zero, it indicates that the ages are equal.
        If the result is a positive value, it indicates that the age of the other object (o) is greater than the age of the current
                object (this).

In the context of implementing the compareTo method, the choice between this.age - o.age and o.age - this.age depends on the desired 
 ordering. For example, if you want the objects to be ordered in ascending order based on age, you would typically use 
 this.age - o.age. If you want them to be ordered in descending order based on age, you would use o.age - this.age.



class Solution {
      static class Edge{
          int src;
          int nbr;
 
          Edge(int u, int v){
              this.src=u;
              this.nbr=v;
          }
      }

      static class Pair implements Comparable<Pair>{  //Must Understand this, Will help in queue questions as well. 
		int wsf;
		String psf;   

		Pair(int wsf, String psf){
			this.wsf=wsf;
			this.psf=psf;
		}

		public int compareTo(Pair o){
			return this.wsf-o.wsf;
		}
	}
  
      public boolean validPath(int n, int[][] edges, int source, int destination) {
  
  
          ArrayList<Edge>[] graph = new ArrayList[n];
  
          for(int i=0;i<n;i++){
             graph[i] = new ArrayList<Edge>();
          }
          for(int i=0;i<edges.length;i++){
              graph[edges[i][0]].add(new Edge(edges[i][0],edges[i][1]));
              graph[edges[i][1]].add(new Edge(edges[i][1],edges[i][0]));
          }
          boolean[] visited=new boolean[n];
          return pathExist(graph, source, destination,visited,criteria, k,source+"",0);
  }
  
      static String spath;
      static Integer spathwt=Integer.MAX_VALUE;
      static String lpath;
      static Integer lpathwt= Integer.MIN_VALUE;
      static String cpath;
      static Integer cpathwt = Integer.MAX_VALUE;
      static String fpath;
      static Integer fpathwt=Integer.MIN_VALUE;
      static PriorityQueue<Pair> pq= new PriorityQueue<>();

      boolean pathExist(ArrayList<Edge>[] graph, int src, int dest,boolean[] visited,int criteria, int k, String psf, int wsf){
  
          if(src == dest)
              if(wsf<sapthwt){
		    sapthwt=wsf;
		    spath=psf;
		}
	      if(wsf>lpathwt){
		    lpathwt=wsf;
		     lpath=psf;
		}
	      if(wsf>criteria && wsf< cpathwt){
		   capth=swf;
	           cpath=psf; 
		}
	      if(wsf<criteria && wsf>fpathwt){
   	  	   fpathwt=wsf;
		   fpath=psf;
		}
	      if(pq.size()<k){
		   pq.add(new Pair(wsf,psf));
		}
	       else{
                     if(wsf>pq.peek().wsf){
				pq.remove();
				pq.add(new Pair(wsf,psf));
			}
               }
              return;
  
          visited[src] = true;
          for(Edge edge: graph[src]){
              if(visited[edge.nbr]==false){
                  pathExist(graph, edge.nbr, dest,visited,criteria, k, psf+edge.nbr, wsf+edge.wt);
               }
           }
          visited[src]=false;
  
       }
  }

