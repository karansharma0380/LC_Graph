Leetcode1162 As Far from Land as Possible (https://leetcode.com/problems/as-far-from-land-as-possible/)

Ques: Given an n x n grid containing only values 0 and 1, where 0 represents water and 1 represents land, find a water cell such
      that its distance to the nearest land cell is maximized, and return the distance. If no land or water exists in the grid, 
      return -1.

      The distance used in this problem is the Manhattan distance: the distance between two cells (x0, y0) and (x1, y1) is
      |x0 - x1| + |y0 - y1|.

    Input: grid = [[1,0,1],[0,0,0],[1,0,1]]
    Output: 2
    Explanation: The cell (1, 1) is as far as possible from all the land with distance 2.

    Input: grid = [[1,0,0],[0,0,0],[0,0,0]]
    Output: 4
    Explanation: The cell (2, 2) is as far as possible from all the land with distance 4.

Soln: This is exact same as 01 matrix but only change is that the role of 0 and 1 is swapped. And you have to return level instead. 

class Solution {
    static class Pair{
        int x;
        int y;

        Pair(int x, int y){
            this.x=x;
            this.y=y;
        }
    }

    public int maxDistance(int[][] grid) {
        ArrayDeque<Pair> q =new ArrayDeque<>();

        for(int i=0;i<grid.length;i++){
            for(int j=0;j<grid[0].length;j++){
                if(grid[i][j]==1){
                    q.add(new Pair(i,j));
                }
            }
        }

        if(q.size()==grid.length*grid[0].length){
            return -1;
        }

        int[][] dirs = {{0,1},
                        {1,0},
                        {0,-1},
                        {-1,0}};
        int level =-1;

        while(q.isEmpty()==false){
            int size=q.size();
            level++;
            while(size-->0){
                Pair rem=q.remove();

                for(int i=0;i<4;i++){
                    int rowdash = rem.x + dirs[i][0];
                    int coldash = rem.y + dirs[i][1];

                    if(rowdash>=0 && coldash>=0 && rowdash<grid.length && coldash<grid[0].length &&
                      grid[rowdash][coldash]==0){
                        grid[rowdash][coldash] = 1;
                        q.add(new Pair(rowdash,coldash));
                    }
                }

            }
        }

        return level;
    }
}
