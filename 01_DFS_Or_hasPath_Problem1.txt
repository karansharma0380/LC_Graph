Leetcode 1971

There is a bi-directional graph with n vertices, where each vertex is labeled from 0 to n - 1 (inclusive). The edges
in the graph are represented as a 2D integer array edges, where each edges[i] = [ui, vi] denotes a bi-directional edge
between vertex ui and vertex vi. Every vertex pair is connected by at most one edge, and no vertex has an edge to itself.

You want to determine if there is a valid path that exists from vertex source to vertex destination.

Given edges and the integers n, source, and destination, return true if there is a valid path from source to destination,
or false otherwise.


e.g.   
Input: n = 3, edges = [[0,1],[1,2],[2,0]], source = 0, destination = 2
Output: true
Explanation: There are two paths from vertex 0 to vertex 2:
- 0 → 1 → 2
- 0 → 2

			0---------1
			 \       /
                          \     /
			   \   /
                             2

Solution: This is basic DFS problem.

First we are creating the graph. Then applying the DFS on that to find whether path exist true or false. 

class Solution {
    static class Edge{
        int src;
        int nbr;
        
        Edge(int u, int v){
            this.src=u;
            this.nbr=v;
        }
    }
    
    public boolean validPath(int n, int[][] edges, int source, int destination) {
        
        
        ArrayList<Edge>[] graph = new ArrayList[n];

        for(int i=0;i<n;i++){
            graph[i] = new ArrayList<Edge>();
        }
        for(int i=0;i<edges.length;i++){
            graph[edges[i][0]].add(new Edge(edges[i][0],edges[i][1]));
            graph[edges[i][1]].add(new Edge(edges[i][1],edges[i][0]));
        }
        boolean[] visited=new boolean[n];
        return pathExist(graph, source, destination,visited);
}
    
    
    boolean pathExist(ArrayList<Edge>[] graph, int src, int dest, boolean[] visited){

        if(src == dest)
            return true;
        
        visited[src] = true;
        for(Edge edge: graph[src]){
            if(visited[edge.nbr] == false){
                boolean hasNodePath = pathExist(graph, edge.nbr, dest,visited);
                if(hasNodePath){
                    return true;
                }
            }
        }
        return false;
    }
    
}


Solution 2:

Without Edge class

class Solution {

    boolean pathExist(ArrayList<Integer>[] graph, int src, int dest, boolean[] visited){

        if(src == dest)
            return true;
        
        visited[src] = true;
        for(int node : graph[src]){
            if(visited[node] == false){
                boolean hasNodePath = pathExist(graph, node, dest, visited);
                if(hasNodePath)
                    return true;
            }
        }
        return false;
    }

    public boolean validPath(int n, int[][] edges, int source, int destination) {
        
        ArrayList<Integer>[] graph = new ArrayList[n];

        for(int i=0;i<n;i++){
            graph[i] = new ArrayList<Integer>();
        }
        for(int i=0;i<edges.length;i++){
            graph[edges[i][0]].add(edges[i][1]);
            graph[edges[i][1]].add(edges[i][0]);
        }
        return pathExist(graph, source, destination, new boolean[n]);
    }
}
