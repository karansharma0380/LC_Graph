                                           Intro to Graph and basic Questions


We have this graph..
			
                            40       2
			0--------3--------4\
			|        |        |  \
                     10 |        |10    3 |   \3
                        |        |        |    \
                        1--------2        5-----6
                            10              3  

Now there are several paths from 0 to 6

Shortest path in terms of no.of edge -> 0-3-4-6 [BFS] [not considering weights]
             in terms of less weights-> 0-1-2-3-4-5-6 [djikstra]


Minimum spanning Tree -- Connect all the components with minimum wires
                          0        3-----4    
                          |        |     |
                          |        |     |
                          |        |     |
                          1--------2     5-----6 
        This innvolves two alogrithms-> Prims
					Kruskal

There are directed graphs as well
                    
                        F7------>F6----->F5
			  \                \
			   \                \  [F5->F4]   
	          [F7-F1]   \                F4                 This is a directed graph.
                             \                | [F4->F3]
			      F1---->F2------>F3

Topological sort-> Find the order from least dependent to most   F3---F2---F4---F1---F5---F6---F7



Representation
1. Adjacency Matrix
2. Adjacency List


Program of a simple graphs


static class Edge{
  int src;
  int nbr;
  int wt;
  Edge(int u, int v, int wt){
    this.src=u;
    this.nbr=v;
    this.wt=wt;
   }
}

public static void main(){
	ArrayList<Edge>[] graph=new ArrayList<Edge>[specific_size];

	for(int i=0;i<7;i++){
            graph[i]=new ArrayList<Edge>();
        }
        
        graph[0].add(new Edge(0,1,10));
        graph[0].add(new Edge(0,3,40));
        
        graph[1].add(new Edge(1,0,10));
        graph[1].add(new Edge(1,2,10));
        
        graph[2].add(new Edge(2,1,10));
        graph[2].add(new Edge(2,3,10));
        
        graph[3].add(new Edge(3,0,40));
        graph[3].add(new Edge(3,4,2));
        graph[3].add(new Edge(3,2,10));
        
        graph[4].add(new Edge(4,3,2));
        graph[4].add(new Edge(4,5,3));
        graph[4].add(new Edge(4,6,8));
        
        graph[5].add(new Edge(5,4,3));
        graph[5].add(new Edge(5,6,3));
        
        graph[6].add(new Edge(6,5,3));
        graph[6].add(new Edge(6,4,8));
}


Problem with this implementation is that we are also storing redundant data that source again inside the Edge e.g. below
	0-> (0,1,10),(0,3,40)  edge objects storing 0 again which is source.

We can also achieve a implementation like below..
	0-> 1,3
	1-> 0,2
	2-> 1,3



public static void main(){
	ArrayList<Integer>[] graph = new ArrayList<Integer>[n]; // n-> specific size n passed
	
	for(int i=0;i<n;i++){
		graph[i]=new ArrayList<Integer>();
	}


	graph[0].add(1);
	grapg[0].add(3);
 	.
	.
	.
	.

	So on... 
}
