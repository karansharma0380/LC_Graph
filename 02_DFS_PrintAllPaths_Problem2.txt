

Solution:

We just have to modify the previous solution.


class Solution {
    static class Edge{
        int src;
        int nbr;
        
        Edge(int u, int v){
            this.src=u;
            this.nbr=v;
        }
    }
    
    public boolean validPath(int n, int[][] edges, int source, int destination) {
        
        
        ArrayList<Edge>[] graph = new ArrayList[n];

        for(int i=0;i<n;i++){
            graph[i] = new ArrayList<Edge>();
        }
        for(int i=0;i<edges.length;i++){
            graph[edges[i][0]].add(new Edge(edges[i][0],edges[i][1]));
            graph[edges[i][1]].add(new Edge(edges[i][1],edges[i][0]));
        }
        boolean[] visited=new boolean[n];
        return pathExist(graph, source, destination,visited,src+"");
}
    
    
    boolean pathExist(ArrayList<Edge>[] graph, int src, int dest,boolean[] visited, String psf){

        if(src == dest)
	    System.out.println(psf);
            return;
        
        visited[src] = true;
        for(Edge edge: graph[src]){
            if(visited[edge.nbr]==false){
		pathExist(graph, edge.nbr, dest,visited, psf+edge.nbr);
       	     }
   	 }
	visited[src]=false;
    
     }
}
