Leetcode 200

Given an m x n 2D binary grid grid which represents a map of '1's (land) and '0's (water), return the number of islands.

An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four
 edges of the grid are all surrounded by water.

Input: grid = [
  ["1","1","1","1","0"],
  ["1","1","0","1","0"],
  ["1","1","0","0","0"],
  ["0","0","0","0","0"]
]
Output: 1


Input: grid = [
  ["1","1","0","0","0"],
  ["1","1","0","0","0"],
  ["0","0","1","0","0"],
  ["0","0","0","1","1"]
]
Output: 3


Solution:

class Solution {
    public int numIslands(char[][] grid) {
        int count=0;
        
        boolean[][] visited = new boolean[grid.length][grid[0].length];
        for(int i=0;i<grid.length;i++){
            for(int j=0;j<grid[0].length;j++){
                if(visited[i][j]==false && grid[i][j]=='1'){
                    dfs(grid,i,j,visited);
                    count++;
                }
            }
        }
        
        return count;
    }
    
    public void dfs(char[][] grid,int i, int j, boolean[][] visited){
        if(i<0 || j<0 || i>=grid.length || j>=grid[0].length || grid[i][j]=='0'|| visited[i][j]==true){
            return;
        }
        
        visited[i][j]=true;
        dfs(grid, i-1,j,visited);
        dfs(grid, i,j+1,visited);
        dfs(grid, i,j-1,visited);
        dfs(grid, i+1,j,visited);
    }
}




