Leetcode 1020 Number of Enclaves https://leetcode.com/problems/number-of-enclaves/

You are given an m x n binary matrix grid, where 0 represents a sea cell and 1 represents a land cell.
A move consists of walking from one land cell to another adjacent (4-directionally) land cell or walking off the boundary of the
grid. Return the number of land cells in grid for which we cannot walk off the boundary of the grid in any number of moves.

Input: grid = [[0,0,0,0],[1,0,1,0],[0,1,1,0],[0,0,0,0]]
Output: 3
Explanation: There are three 1s that are enclosed by 0s, and one 1 that is not enclosed because its on the boundary.

Input: grid = [[0,1,1,0],[0,0,1,0],[0,0,1,0],[0,0,0,0]]
Output: 0
Explanation: All 1s are either on the boundary or can reach the boundary.

Solution: [0,0,0,0]
	  [1,0,1,0]
	  [0,1,1,0]
	  [0,0,0,0]

We will use DFS concept in this but in a different way, we will apply dfs whenever we find a '1' but in boundary cells i.e. when
  i. row ==0
  ii. col ==0
  iii. row == grid.length -1   [last row]
  iv. col== grid[0].length -1 [last column]
The moment we find a '1' we will launch the dfs function and in whole of that component we will change '1' -> '0'

After converting all the '1's of the component which is connected to border. we will just simply count the 1's and return the
count.


class Solution {
    public int numEnclaves(int[][] grid) {

        for(int i=0;i<grid.length;i++){
            for(int j=0;j<grid[0].length;j++){
                if(i==0 || j==0 || i==grid.length-1 || j==grid[0].length-1){
                    if(grid[i][j]==1){
                        dfs(grid, i, j);
                    }
                }
            }
        }

        int count=0;
        for(int i=0;i<grid.length;i++){
            for(int j=0;j<grid[0].length;j++){
                if(grid[i][j]==1){
                    count++;
                }
            }
        }

        return count;
    }

    int[][] dirs = {{0,1},
                    {1,0},
                    {0,-1},
                    {-1,0}};
    public void dfs(int[][] grid, int row, int col){
        if(row<0 || col<0 || row>=grid.length || col>=grid[0].length || grid[row][col]==0){
            return;
        }

        grid[row][col]=0;
        for(int i=0;i<4;i++){
            int rowdash = row +dirs[i][0];
            int coldash = col +dirs[i][1];

            dfs(grid, rowdash, coldash);
        }
    }
}
