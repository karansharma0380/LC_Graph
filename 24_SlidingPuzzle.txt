Leetcode773 Sliding Puzzle (https://leetcode.com/problems/sliding-puzzle/)

Ques: On an 2 x 3 board, there are five tiles labeled from 1 to 5, and an empty square represented by 0. A move
      consists of choosing 0 and a 4-directionally adjacent number and swapping it.

      The state of the board is solved if and only if the board is [[1,2,3],[4,5,0]].

      Given the puzzle board board, return the least number of moves required so that the state of the board is
      solved. If it is impossible for the state of the board to be solved, return -1.

      Input: board = [[1,2,3],[4,0,5]]
      Output: 1
      Explanation: Swap the 0 and the 5 in one move.

      Input: board = [[4,1,2],[5,0,3]]
      Output: 5
      Explanation: 5 is the smallest number of moves that solves the board.
      An example path:
      After move 0: [[4,1,2],[5,0,3]]
      After move 1: [[4,1,2],[0,5,3]]
      After move 2: [[0,1,2],[4,5,3]]
      After move 3: [[1,0,2],[4,5,3]]
      After move 4: [[1,2,0],[4,5,3]]
      After move 5: [[1,2,3],[4,5,0]]

Soln:

class Solution {
    public static String swapchar(String st, int i, int j){
        StringBuilder sb = new StringBuilder(st);
        sb.setCharAt(i,st.charAt(j));
        sb.setCharAt(j,st.charAt(i));

        return sb.toString();
    }
    public int slidingPuzzle(int[][] board) {
        ArrayDeque<String> q = new ArrayDeque<>();
        String target = "123450";

        StringBuilder sb = new StringBuilder();
        for(int i=0;i<board.length;i++){
            for(int j=0;j<board[0].length;j++){
                sb.append(board[i][j]);
            }
        }
        String initial = sb.toString();

        int[][] swapsidx = {{1,3},{0,2,4},{1,5},{0,4},{1,3,5},{4,2}};

        q.add(initial);
        int level=0;
        HashSet<String> vis = new HashSet<>();

        while(q.isEmpty()==false){
            int size=q.size();
            while(size-->0){
                String rem = q.remove();

                if(rem.equals(target)){
                    return level;
                }

                int idx=-1;
                for(int i=0;i<rem.length();i++){
                    if(rem.charAt(i)=='0'){
                        idx=i;
                        break;
                    }
                }

                int[] swap = swapsidx[idx];
                for(int i=0;i<swap.length;i++){
                    String tobeAdded = swapchar(rem,idx,swap[i]);
                    if(vis.contains(tobeAdded)){
                        continue;
                    }
                    q.add(tobeAdded);
                    vis.add(tobeAdded);
                }
            }
            level++;
        }
        return -1;
    }
}
